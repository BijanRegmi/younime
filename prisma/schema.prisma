// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    // Next Auth
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum AnimeStatus {
    WATCHING
    COMPLETED
    HOLD
    CONSIDERING
    DROPPED
}

model User {
    // Next Auth
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    // User data
    password             String?
    lastWatchedEpisodeId Int?
    history              history_entry[]

    // Comments stuffs
    comments         comment[] @relation("commented")
    likedComments    comment[] @relation("likedComments")
    dislikedComments comment[] @relation("dislikedComments")

    lastWatchedEp episode? @relation("lastWatched", fields: [lastWatchedEpisodeId], references: [id])
}

model history_entry {
    userId  String
    animeId Int
    status  AnimeStatus

    user  User  @relation(fields: [userId], references: [id])
    anime anime @relation(fields: [animeId], references: [id])

    @@unique([userId, animeId])
}

model anime {
    id         Int     @id
    title      String
    alttitle   String?
    score      Float   @default(0.0)
    age_rating String?
    studio     String?
    season     String?
    type       String?
    thumbnail  String?
    synopsis   String?

    genres   genre[]
    episodes episode[]
    mapping  mapping?
    history  history_entry[]
}

model comment {
    id          Int      @id @default(autoincrement())
    content     String
    spoiler     Boolean? @default(false)
    episodeId   Int
    commenterId String

    likers    User[] @relation("likedComments")
    dislikers User[] @relation("dislikedComments")

    commenter User    @relation("commented", fields: [commenterId], references: [id])
    episode   episode @relation(fields: [episodeId], references: [id])
}

model episode {
    id       Int     @id @default(autoincrement())
    file_url String? @unique
    name     String?
    animeId  Int

    comments     comment[]
    lastWatchers User[]    @relation("lastWatched")

    anime anime @relation(fields: [animeId], references: [id])
}

model genre {
    name  String  @id
    anime anime[]
}

model mapping {
    animeId Int @id
    otherId Int

    anime anime @relation(fields: [animeId], references: [id])
}
