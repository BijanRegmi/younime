// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    // Next Auth
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum AnimeStatus {
    WATCHING
    COMPLETED
    HOLD
    CONSIDERING
    DROPPED
}

enum CommentInteraction {
    LIKED
    DISLIKED
}

enum ReportItem {
    ANIME
    EPISODE
    COMMENT
    USER
    NONE
}

model User {
    // Next Auth
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    // User data
    password String?
    history  history_entry[]

    // Comments stuffs
    comments             comment[]             @relation("commented")
    comment_interactions comment_interaction[] @relation("user_interaction")

    reports report[]
}

model history_entry {
    status    AnimeStatus
    updatedAt DateTime    @updatedAt

    // whose?
    userId String
    user   User   @relation(fields: [userId], references: [id])

    // which anime?
    anime   anime @relation(fields: [animeId], references: [id])
    animeId Int

    // which episode
    episode episode @relation(fields: [epId], references: [id])
    epId    Int

    @@id([userId, animeId])
}

model comment_interaction {
    state CommentInteraction

    // by whom?
    userId String
    user   User   @relation("user_interaction", fields: [userId], references: [id])

    // on which comment?
    commentId Int
    comment   comment @relation("comment_interaction", fields: [commentId], references: [id], onDelete: Cascade)

    @@id([userId, commentId])
}

model anime {
    id         Int     @id
    title      String
    alttitle   String?
    score      Float   @default(0.0)
    age_rating String  @default("Not Rated")
    studio     String  @default("Unknown")
    season     String  @default("Unknown")
    type       String  @default("Unknown")
    thumbnail  String
    synopsis   String  @default("")
    status     String

    genres   genre[]
    episodes episode[]
    history  history_entry[]
}

model comment {
    id      Int     @id @default(autoincrement())
    content String
    spoiler Boolean @default(false)

    // on which episode of which anime
    episodeId Int
    episode   episode @relation(fields: [episodeId], references: [id])

    // by whom?
    commenterId String
    commenter   User   @relation("commented", fields: [commenterId], references: [id])

    comment_interactions comment_interaction[] @relation("comment_interaction")
}

model episode {
    id     Int     @id
    name   String
    order  Int
    filler Boolean

    // of which anime?
    animeId Int
    anime   anime @relation(fields: [animeId], references: [id])

    comments      comment[]
    history_entry history_entry[]
}

model genre {
    name  String  @id
    anime anime[]
}

model report {
    id      Int        @id @default(autoincrement())
    kind    ReportItem @default(NONE)
    refId   String?
    content String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}
